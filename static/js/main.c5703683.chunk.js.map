{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","App.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","index.tsx"],"names":["actions","todo","type","payload","initialState","modalLoader","openTodoModal","currentTodoReducer","state","action","query","status","option","searchWord","filterReducer","todos","load","todosFromServer","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppSelector","useDispatch","useSelector","TodoList","dispatch","isSelected","id","length","className","map","t","completed","title","onClick","currentTodoActions","TodoFilter","onSubmit","event","preventDefault","value","onChange","e","actionsFilter","target","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","ActionTodos","Loader","TodoModal","useState","currentUser","setCurrentUser","loader","setLoader","useEffect","userId","href","email","name","App","actionsTodos","catch","error","includes","toLowerCase","active","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c5703683.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype Action = SetTodoAction | RemoveTodoAction;\n\ntype InitialState = {\n  todo: Todo | null;\n  modalLoader: boolean;\n  openTodoModal: boolean;\n};\n\nconst initialState: InitialState = {\n  todo: null,\n  modalLoader: false,\n  openTodoModal: false,\n};\n\nconst currentTodoReducer = (\n  state: InitialState = initialState,\n  action: Action,\n): InitialState => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return {\n        ...state,\n        todo: action.payload,\n        openTodoModal: true,\n      };\n    case 'currentTodo/REMOVE':\n      return {\n        ...state,\n        todo: null,\n        openTodoModal: false,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","type Query = { type: 'query', payload: string };\ntype Status = { type: 'status', payload: string };\n\ntype Actions = Status | Query;\n\nconst query = (searchWord: string): Query => (\n  { type: 'query', payload: searchWord }\n);\n\nconst status = (option: string): Status => (\n  { type: 'status', payload: option }\n);\n\ntype InitialState = {\n  query: string;\n  status: string;\n};\n\nconst initialState: InitialState = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (\n  state: InitialState = initialState,\n  action: Actions,\n): InitialState => {\n  switch (action.type) {\n    case 'status':\n      return {\n        ...state,\n        status: action.payload,\n      };\n    case 'query':\n      return {\n        ...state,\n        query: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const actions = { status, query };\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodos = { type: 'set', payload: Todo[] };\ntype LoadTodos = { type: 'load' };\n\ntype Actions = SetTodos | LoadTodos;\n\nconst set = (todosFromServer: Todo[]): SetTodos => (\n  { type: 'set', payload: todosFromServer }\n);\n\nconst load = (): LoadTodos => (\n  { type: 'load' }\n);\n\ntype InitialState = {\n  todos: Todo[],\n  load: boolean,\n};\n\nconst initialState: InitialState = {\n  todos: [],\n  load: false,\n};\n\nconst todosReducer = (\n  state: InitialState = initialState,\n  action: Actions,\n): InitialState => {\n  switch (action.type) {\n    case 'set':\n      return {\n        ...state,\n        todos: action.payload,\n        load: false,\n      };\n    case 'load':\n      return {\n        ...state,\n        load: true,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const actions = { set, load };\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Todo } from '../../types/Todo';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { useAppSelector } from '../../app/hooks';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  const dispatch = useDispatch();\n  const { todo } = useAppSelector(state => state.currentTodo);\n\n  const isSelected = (currentTodo: Todo) => {\n    return currentTodo.id === todo?.id;\n  };\n\n  if (!todos?.length) {\n    return (\n      <p className=\"notification is-warning\">\n        There are no todos matching current filter criteria\n      </p>\n    );\n  }\n\n  return (\n    <>\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {todos.map(t => (\n            <tr data-cy=\"todo\" key={t.id}>\n              <td className=\"is-vcentered\">{t.id}</td>\n              <td className=\"is-vcentered\">\n                {t.completed\n                  && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p className={\n                  t.completed ? 'has-text-success' : 'has-text-danger'\n                }\n                >\n                  {t.title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => {\n                    dispatch(currentTodoActions.setTodo(t));\n                  }}\n                >\n                  <span className=\"icon\">\n                    <i className={`far ${isSelected(t) ? 'fa-eye-slash' : 'fa-eye'}`} />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { actions as actionsFilter } from '../../features/filter';\nimport { useAppSelector } from '../../app/hooks';\n\nexport const TodoFilter: React.FC = () => {\n  const { status, query } = useAppSelector(state => state.filter);\n  const dispatch = useDispatch();\n\n  const handelDelete = () => {\n    dispatch(actionsFilter.query(''));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={e => dispatch(actionsFilter.status(e.target.value))}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={e => dispatch(actionsFilter.query(e.target.value))}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query && (\n            // eslint-disable-next-line jsx-a11y/control-has-associated-label\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handelDelete}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","/* eslint-disable max-len */\nimport React, { useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { useDispatch } from 'react-redux';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { getTodos } from './api';\nimport { actions as actionsTodos } from './features/todos';\nimport { useAppSelector } from './app/hooks';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nenum ActionTodos {\n  active = 'active',\n  completed = 'completed',\n}\n\nexport const App: React.FC = () => {\n  const { todos, load } = useAppSelector(state => state.todos);\n  const { status, query } = useAppSelector(state => state.filter);\n  const { openTodoModal } = useAppSelector(state => state.currentTodo);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(actionsTodos.load());\n    getTodos()\n      .then(res => {\n        dispatch(actionsTodos.set(res));\n      })\n      .catch(error => {\n        throw error;\n      });\n  }, []);\n\n  const handleFilter = () => {\n    return todos.filter(todo => {\n      if (query) {\n        return todo.title.includes(query.toLowerCase());\n      }\n\n      switch (status) {\n        case ActionTodos.active:\n          return !todo.completed;\n        case ActionTodos.completed:\n          return todo.completed;\n        default:\n          return true;\n      }\n    });\n  };\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {load\n                ? <Loader />\n                : <TodoList todos={handleFilter()} />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {openTodoModal && <TodoModal />}\n    </>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Loader } from '../Loader';\nimport { useAppSelector } from '../../app/hooks';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const { todo } = useAppSelector(state => state.currentTodo);\n  const dispatch = useDispatch();\n  const [currentUser, setCurrentUser] = useState<User>();\n  const [loader, setLoader] = useState<boolean>(true);\n\n  useEffect(() => {\n    if (todo) {\n      getUser(todo.userId)\n        .then(res => {\n          setCurrentUser(res);\n          setLoader(false);\n        });\n    }\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      { loader ? <Loader /> : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => dispatch(currentTodoActions.removeTodo())}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">{todo?.title}</p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n\n              {todo?.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              ) }\n              {' by '}\n              <a href={`mailto:${currentUser?.email}`}>{currentUser?.name}</a>\n            </p>\n          </div>\n        </div>\n      ) }\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}